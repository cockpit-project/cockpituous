#!/usr/bin/python2
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2017 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

ADDRESS = ("127.0.0.8", 8989)

import httplib
import json
import os
import signal
import subprocess
import time
import unittest

BASE = os.path.dirname(__file__)
SINK = os.path.join(BASE, "sink")
CONFIG = os.path.join(BASE, "test-sink.conf")
DEVNULL = open("/dev/null", "r+")

def mockServer():
    child = os.fork()
    if child != 0:
        return child

    # Data used by the above handler
    data = {
        "count": 0,
        "test": { "test": "handler" }
    }

    import BaseHTTPServer
    class Handler(BaseHTTPServer.BaseHTTPRequestHandler):

        def replyJson(self, value):
            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(json.dumps(value))
            self.wfile.close()

        def do_POST(self):
            if self.path == "/test":
                data = self.rfile.read(int(self.headers.getheader('Content-Length')))
                self.server.data["test"] = json.loads(data)
                self.replyJson(self.server.data["test"])
            else:
                self.send_error(404, 'Mock Not Found: ' + self.path)

        def do_GET(self):
            if self.path == "/expect":
                self.replyJson([ "value", self.server.data["count"] ])
                self.server.data["count"] += 1
            elif self.path == "/test":
                self.replyJson(self.server.data["test"])
            else:
                self.send_error(404, 'Mock Not Found: ' + self.path)

    httpd = BaseHTTPServer.HTTPServer(ADDRESS, Handler)
    httpd.data = data
    httpd.serve_forever()
    os._exit(1)

def mockKill(child):
    os.kill(child, signal.SIGTERM)
    os.waitpid(child, 0)

class TestGitHub(unittest.TestCase, ):
    def setUp(self):
        self.child = mockServer()

    def tearDown(self):
        mockKill(self.child)

    def testRequest(self):
        begin = {
            "github": {
                "requests": [
                    {
                        "method": "POST",
                        "resource": "/test",
                        "data": "string"
                    }
                ]
            }
        }

        # Make sure the sink works
        input = json.dumps(begin) + "\nCONTENT\n{ }"
        sink = subprocess.Popen([ SINK, "--config", CONFIG, "identifier" ],
                                stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        (output, error) = sink.communicate(input)
        self.assertEqual(sink.returncode, 0)
        self.assertEqual(output, "CONTENT\n")

        # Make sure the data was posted
        conn = httplib.HTTPConnection("{0}:{1}".format(*ADDRESS))
        conn.request("GET", "/test")
        output = conn.getresponse().read()
        self.assertEqual(output, "\"string\"")

    def testExpectSucceed(self):
        begin = {
            "github": {
                "watches": [{
                    "interval": 1,
                    "resource": "/test",
                    "result": { "test": "handler" }
                }]
            }
        }

        sink = subprocess.Popen([ SINK, "--config", CONFIG, "identifier" ],
                                stdin=subprocess.PIPE, stdout=DEVNULL)
        sink.stdin.write(json.dumps(begin) + "\nWAITING\n")

        # Wait for watches to happen
        time.sleep(5)
        sink.stdin.write("{ }")
        sink.stdin.close()

        # Should succeed successfully
        ret = sink.wait()
        self.assertEqual(ret, 0)

    def testExpectTerminate(self):
        begin = {
            "github": {
                "watches": [{
                    "interval": 1,
                    "resource": "/expect",
                    "result": [ 0 ]
                }]
            }
        }

        sink = subprocess.Popen([ SINK, "--config", CONFIG, "identifier" ],
                                stdin=subprocess.PIPE, stdout=DEVNULL)
        sink.stdin.write(json.dumps(begin) + "\nWAITING\n")

        # Should terminate by itself due to /expect
        ret = sink.wait()
        self.assertEqual(ret, -signal.SIGTERM)

if __name__ == '__main__':
    unittest.main()
