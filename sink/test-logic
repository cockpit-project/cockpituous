#!/usr/bin/python3

# This file is part of Cockpit.
#
# Copyright (C) 2017 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

# Fixtures
CONTAINS = [
    # Basic comparisons
    { "ret": True,  "expect": True, "result": True },
    { "ret": False, "expect": 1, "result": 2 },
    { "ret": False, "expect": "x", "result": "2" },
    { "ret": True,  "expect": "x", "result": "x" },
    { "ret": False, "expect": "x", "result": None },
    { "ret": False, "expect": "x", "result": { } },
    { "ret": False, "expect": "x", "result": [ ] },
    { "ret": False, "expect": { }, "result": [ ] },
    { "ret": False, "expect": { }, "result": "x" },
    { "ret": False, "expect": [ ], "result": "x" },

    # Lists
    { "ret": True,  "expect": [ "a" ], "result": [ "a", "b", "x", "z" ] },
    { "ret": True,  "expect": [ "a", "b" ], "result": [ "a", "b", "x", "z" ] },
    { "ret": False, "expect": [ "y" ], "result": [ "a", "b", "x", "z" ] },
    { "ret": True, "expect": [ "z" ], "result": [ "a", "b", "x", "z" ] },
    { "ret": False, "expect": [ "z" ], "result": [ "a", "b", "z", "x", "z" ] },
    { "ret": True, "expect": [ "a", "z" ], "result": [ "a", "b", "z", "x", "y" ] },
    { "ret": True, "expect": [ "z", "a" ], "result": [ "a", "b", "z", "x" ] },
    { "ret": True,  "expect": [ ], "result": [ "a", "b", "x", "z" ] },
    { "ret": True, "expect": [ "a", "z" ], "result": [ "a", "b", "x", "z" ] },
    { "ret": False, "expect": [ "a", "y" ], "result": [ "a", "b", "x", "z" ] },

    # Dicts
    { "ret": True,  "expect": { "x": 1 }, "result": { "a": 0, "b": 2, "x": 1, "z": 5 } },
    { "ret": True,  "expect": { "x": 1, "a": 0 }, "result": { "a": 0, "b": 2, "x": 1, "z": 5 } },
    { "ret": False, "expect": { "y": 1 }, "result": { "a": 0, "b": 2, "x": 1, "z": 5 } },

    # Nested
    { "ret": True,  "expect": { "z": [ "x" ] }, "result": { "a": 0, "x": 1, "z": [ "x", "a" ] } },
    { "ret": True,  "expect": { "x": 1, "z": [ "x" ] }, "result": { "a": 0, "x": 1, "z": [ "x", "a" ] } },
    { "ret": False, "expect": { "x": 1, "z": [ "x" ] }, "result": { "a": 0, "x": 1, "z": [ ] } },
    { "ret": True,  "expect": [ { "x": 1 } ], "result": [ { "x": 1 }, { "a": 0 } ] },
    { "ret": True,  "expect": [ "x", { "z": 5 } ], "result": [ "x", { "z": 5 } ] },
    { "ret": False, "expect": [ "x", { "z": 5 } ], "result": [ { "z": 5 } ] },
]

import os
import importlib.machinery
import unittest

# Import the sink code
BASE = os.path.dirname(__file__)
sink = importlib.machinery.SourceFileLoader("sink", os.path.join(BASE, "sink")).load_module()

class TestLogic(unittest.TestCase):
    def testContains(self):
        for fixture in CONTAINS:
            if fixture["ret"]:
                self.assertTrue(sink.contains(fixture["expect"], fixture["result"]),
                                "%s should contain %s" % (repr(fixture["result"]), repr(fixture["expect"])))
            else:
                self.assertFalse(sink.contains(fixture["expect"], fixture["result"]),
                                 "%s should not contain %s" % (repr(fixture["result"]), repr(fixture["expect"])))

if __name__ == '__main__':
    unittest.main()
