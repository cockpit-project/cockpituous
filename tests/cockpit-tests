#!/bin/sh

set -e

GITHUB_REPO=https://github.com/cockpit-project/cockpit

# If first argument starts with a path no loop
loop=yes
case ${1-} in
    /*)
        loop=no
        ;;
esac

# Set to verbose when looping
if [ $loop = "yes" ]; then
    set -x
fi

# ensure symlinks from /build/ are valid even when mounting /cache
mkdir -p /cache/github /cache/images

# HACK: /sys is read-only in containers. And libvirt tries
# to write there, but only if a specific subtree exists here
if [ -d /sys/devices/virtual/net/lo ]; then
    sudo -n mount -o bind /run /sys/devices/virtual/net/ || true
fi

# ensure we have a passwd entry for random UIDs
# https://docs.openshift.com/container-platform/3.7/creating_images/guidelines.html
if ! whoami && [ -w /etc/passwd ]; then
    echo "user:x:$(id -u):0:random uid:${HOME:-/home/user}:/sbin/nologin" >> /etc/passwd
fi

if [ ! -d cockpit ]; then
    git clone "$GITHUB_REPO" cockpit
fi

# If interactive arguments then just exec
if [ $loop != "yes" ]; then
    cd cockpit/
    exec "$@"
fi

echo "Starting testing"

function task() {
    (
        # If the tasks file is executable, run it
        if [ -x cockpit/.tasks ]; then
            cd cockpit/ && ./.tasks

        # If it exists then cat it
        elif [ -e cockpit/.tasks ]; then
            cat cockpit/.tasks

        # No tasks found
        else
            echo "echo 'No tasks found in cockpit repo' >&2; exit 1"
        fi

    # Remove empty lines, comments, and reverse sort.
    # Then randomly pick one of the first 10 commands
    ) | sed -e 's/#.*$//' -e '/^$/d' | sort -r | head -n 10 | shuf | head -n 1
}

# Perform N tasks or waits, then restart
for i in $(seq 1 30); do
    if [ -f cockpit/.git/shallow ]; then
        # if we ended up with a shallow clone from a previous test, start from
        # scratch, as this is brittle to clean up afterwards
        echo "cockpit-tests: Shallow commits exist, cannot reset; re-cloning"
        rm -rf cockpit
        git clone "$GITHUB_REPO" cockpit
    else
        # avoid re-cloning in most cases to save GitHub bandwidth
        git -C cockpit fetch origin
        git -C cockpit reset --hard
        git -C cockpit clean -dxff
        git -C cockpit checkout origin/master
    fi

    line="$(task)"
    if [ -n "$line" ]; then

        # Execute the task in question: 12 hours max
        if /usr/bin/timeout 12h /bin/sh -c "cd cockpit/; set -ex; $line"; then
            continue
        fi
    fi

    # Nothing to do, or failure, wait between 1 and 10 minutes
    sleep $(shuf -i 60-600 -n 1)
done
