---
- name: "Upload tasks service installation script"
  copy:
    src: "{{ role_path }}/../../../tasks/install-service"
    dest: /run/install-service
    mode: preserve

- name: Create custom SELinux policy file contexts
  copy:
    dest: /tmp/cockpituous.fc
    mode: 0644
    content: |
      /var/run/podman/podman.sock    system_u:object_r:container_file_t:s0
  register: selinux_policy_fc

- name: Create custom SELinux policy type enforcements
  copy:
    dest: /tmp/cockpituous.te
    mode: 0644
    content: |
      module cockpituous 1.0;
      require {
              type container_t;
              type container_file_t;
              type container_runtime_t;
              type init_t;
              class process execheap;
              class sock_file { create unlink setattr };
              class unix_stream_socket { connectto };
      }

      # allow systemd to create the socket after changing its type
      allow init_t container_file_t:sock_file { create unlink setattr };

      # container can access that socket
      allow container_t container_runtime_t:unix_stream_socket connectto;

      # HACK: See https://github.com/cockpit-project/cockpituous/issues/579
      allow container_t self:process execheap;
  register: selinux_policy_te

- name: Install custom SELinux rules
  shell: |
    checkmodule -M -m -o /tmp/cockpituous.mod /tmp/cockpituous.te
    semodule_package -o /tmp/cockpituous.pp -m /tmp/cockpituous.mod -f /tmp/cockpituous.fc
    semodule -i /tmp/cockpituous.pp
  when: selinux_policy_fc.changed or selinux_policy_te.changed

# This only applies to RH VPN; make that optional if we ever deploy to public infrastructure
- name: Create npm configuration
  copy:
    dest: /etc/npmrc
    mode: 0644
    content: |
      registry=https://repository.engineering.redhat.com/nexus/repository/registry.npmjs.org/
      fetch-retries=6
      fetch-timeout=600000
      fetch-retry-mintimeout=60000
      maxsockets=3
      cafile=/run/secrets/tasks/npm-registry.crt

- name: Create podman.socket drop-in directory
  file:
    path: /etc/systemd/system/podman.socket.d
    state: directory

# idmapped mount would be better, but did not figure out how
- name: Allow access to podman.socket to unprivileged container user
  copy:
    dest: /etc/systemd/system/podman.socket.d/container-access.conf
    mode: 0644
    content: |
      [Socket]
      SocketGroup=cockpituous

- name: Create job-runner configuration
  copy:
    dest: /etc/job-runner.toml
    content: |
      [logs]
      driver='s3'

      [forge.github]
      token = [{file="/run/secrets/webhook/.config--github-token"}]

      [logs.s3]
      # bots lib/stores.py LOG_STORE
      url = 'https://cockpit-logs.us-east-1.linodeobjects.com/'
      key = [{file="/run/secrets/tasks/s3-keys/cockpit-logs.us-east-1.linodeobjects.com"}]

      [container]
      command = ['podman-remote', '--url=unix:///podman.sock']
      run-args = [
          # resources
          '--device=/dev/kvm',
          '--memory=24g',
          '--pids-limit=16384',
          '--shm-size=1024m',
          # qcow overlays on tmpfs
          '--tmpfs=/tmp:size=14g',
          '--env=TEST_OVERLAY_DIR=/tmp',
          # local image stores
          '--env=COCKPIT_IMAGE_STORES_FILE=/config/image-stores',
          '--volume=/var/cache/cockpit-tasks/image-stores:/config/image-stores:ro',
          # generic secrets
          '--volume=/var/lib/cockpit-secrets/tasks/npm-registry.crt:/run/secrets/tasks/npm-registry.crt:ro',
          # various configuration
          '--volume=/etc/npmrc:/etc/npmrc:ro',
          '--volume=/var/cache/cockpit-tasks/images:/cache/images:rw',
          '--env=TEST_JOBS={{ TEST_JOBS | default(8) }}',
      ]

      [container.secrets]
      # these are *host* paths, this is podman-remote
      # secret from issue-scan for image refreshes
      image-upload=[
          '--volume=/var/lib/cockpit-secrets/tasks/s3-keys/:/run/secrets/s3-keys:ro',
          '--env=COCKPIT_S3_KEY_DIR=/run/secrets/s3-keys',
          # password for console.redhat.com when image-create'ing rhel4edge
          '--volume=/var/lib/cockpit-secrets/tasks/crc_passwd:/run/secrets/crc_passwd:ro',
          '--env=COCKPIT_CRC_PASSWORD=/run/secrets/crc_passwd',
      ]
      # secret from tests-scan for downloading RHEL images
      image-download=[
          # FIXME: create a new "download only" S3 token
          '--volume=/var/lib/cockpit-secrets/tasks/s3-keys/:/run/secrets/s3-keys:ro',
          '--env=COCKPIT_S3_KEY_DIR=/run/secrets/s3-keys',
      ]
      github-token=[
          '--volume=/var/lib/cockpit-secrets/webhook/.config--github-token:/run/secrets/github-token:ro',
          '--env=COCKPIT_GITHUB_TOKEN_FILE=/run/secrets/github-token',
      ]

- name: Set up systemd service for cockpit/tasks
  shell: |
    export INSTANCES={{ instances | default(4) }}
    export TEST_NOTIFICATION_MX={{ notification_mx | default('') }}
    export TEST_NOTIFICATION_TO={{ notification_to | default('') }}
    /run/install-service
