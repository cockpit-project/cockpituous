#!/usr/bin/python3

import os
import sys
import logging
import subprocess
import shutil
import http.server
import json
import contextlib
import ssl

import pika

import github_handler

# Reduce pika noise
logging.getLogger("pika").propagate = False

HOME_DIR = '/tmp/home'
WEBHOOK_SECRETS = '/run/secrets/webhook'
SINK = os.getenv('RELEASE_SINK', 'sink-local')
BOTS_CHECKOUT = HOME_DIR + '/bots'
sys.path.append(BOTS_CHECKOUT)

# Kubernetes Job template for actually running a release
JOB = '''---
apiVersion: batch/v1
kind: Job
metadata:
  name: %(jobname)s
spec:
  ttlSecondsAfterFinished: 0
  template:
    spec:
      containers:
        - name: release
          image: cockpit/release
          workingDir: /build
          args: [ "-s", "-r", "%(git_repo)s", "-t", "%(tag)s", "%(script)s" ]
          volumeMounts:
          - name: secrets
            mountPath: /run/secrets/release
            readOnly: true
          env:
          - name: RELEASE_SINK
            value: %(sink)s
      volumes:
      - name: secrets
        secret:
          secretName: cockpit-release-secrets
      restartPolicy: Never
'''

PASSWD_ENTRY_SCRIPT = '''
set -ex
if ! whoami && [ -w /etc/passwd ]; then
    echo "user:x:$(id -u):0:random uid:${HOME:-/home/user}:/sbin/nologin" >> /etc/passwd
fi
'''


def setup():
    '''Prepare temporary home directory from secrets'''

    if os.path.isdir(HOME_DIR):
        return
    logging.debug('Initializing %s', HOME_DIR)
    os.makedirs(HOME_DIR)

    # install credentials from secrets volume; copy to avoid world-readable files
    # (which e. g. ssh complains about), and to make them owned by our random UID.
    old_umask = os.umask(0o77)
    for f in os.listdir(WEBHOOK_SECRETS):
        if f.startswith('..'):
            continue  # secrets volume internal files
        src = os.path.join(WEBHOOK_SECRETS, f)
        dest = os.path.join(HOME_DIR, f.replace('--', '/'))
        os.makedirs(os.path.dirname(dest), exist_ok=True)
        shutil.copyfile(src, dest)
    os.umask(old_umask)

    ensure_bots_checkout()
    from task import testmap
    for project in testmap.projects():
        subprocess.check_call([os.path.join(BOTS_CHECKOUT, 'tests-scan'), '--amqp',
                               'amqp.cockpit.svc.cluster.local:5671', '--repo', project],
                              cwd=BOTS_CHECKOUT)


def ensure_bots_checkout():
    if not os.path.isdir(BOTS_CHECKOUT):
        url = 'https://github.com/cockpit-project/bots'
        subprocess.check_call(['git', 'clone', url, BOTS_CHECKOUT])
    subprocess.check_call(['git', '-C', BOTS_CHECKOUT, 'fetch', 'origin'])
    subprocess.check_call(['git', '-C', BOTS_CHECKOUT, 'reset', '--hard'])
    subprocess.check_call(['git', '-C', BOTS_CHECKOUT, 'clean', '-dxff'])
    subprocess.check_call(['git', '-C', BOTS_CHECKOUT, 'checkout', 'origin/master'])


@contextlib.contextmanager
def distributed_queue(amqp_server):
    try:
        host, port = amqp_server.split(':')
    except ValueError:
        logging.error('Please format amqp_server as host:port')
        sys.exit(1)

    context = ssl.create_default_context(cafile='/run/secrets/webhook/ca.pem')
    context.load_cert_chain(keyfile='/run/secrets/webhook/amqp-client.key',
                            certfile='/run/secrets/webhook/amqp-client.pem')
    context.check_hostname = False
    connection = pika.BlockingConnection(pika.ConnectionParameters(
        host=host,
        port=int(port),
        ssl_options=pika.SSLOptions(context, server_hostname=host),
        credentials=pika.credentials.ExternalCredentials()))
    channel = connection.channel()

    channel.queue_declare(queue='webhook', auto_delete=False)
    yield channel
    connection.close()


def publish_to_queue(routing_key, event, request):
    body = {
        'event': event,
        'request': request,
    }
    with distributed_queue('amqp.cockpit.svc.cluster.local:5671') as queue:
        queue.basic_publish('', routing_key, json.dumps(body),
                            properties=pika.BasicProperties(content_type='application/json'))


class ReleaseHandler(github_handler.GithubHandler):
    def handle_event(self, event, request):
        logging.info('Handling %s event', event)
        if event == 'create':
            return self.handle_create_event(event, request)
        elif event == 'pull_request':
            return self.handle_pull_request_event(event, request)
        elif event == 'status':
            return self.handle_status_event(event, request)
        elif event == 'issues':
            return self.handle_issues_event(event, request)
        return (501, 'unsupported event ' + event)

    def handle_pull_request_event(self, event, request):
        repo = request['pull_request']['base']['repo']['full_name']
        title = request['pull_request']['title']
        number = int(request['number'])
        action = request['action']
        merged = request['pull_request'].get('merged', False)

        logging.info('repo: %s; title: %s; number: %d; action: %s', repo, title, number, action)
        # see https://developer.github.com/v3/activity/events/types/#pullrequestevent for all actions
        if action == 'closed' and merged:
            logging.info("pull request was merged, ensuring cockpit checkout is latest master")
            ensure_bots_checkout()
            return None
        if action not in ['opened', 'synchronize', 'edited', 'labeled']:
            logging.info("action %s unknown, skipping pull request event" % action)
            return None

        publish_to_queue('webhook', event, request)
        return None

    def handle_status_event(self, event, request):
        repo = request['repository']['full_name']
        sha = request['sha']
        state = request['state']
        description = request.get('description', '')
        if state != 'pending':
            return None
        # only allow manually triggered tests
        logging.info('repo: %s; sha: %s; state: %s; description: %s', repo, sha, state, description)
        if not description.rstrip().endswith('(direct trigger)'):
            logging.info("Status description doesn't end with '(direct trigger)', skipping testing")
            return None

        publish_to_queue('webhook', event, request)
        return None

    def handle_issues_event(self, event, request):
        action = request['action']
        if event == 'issues' and action not in ['opened', 'edited', 'labeled']:
            logging.info("action %s unknown, skipping issues event" % action)
            return None

        publish_to_queue('webhook', event, request)
        return None

    def handle_create_event(self, event, request):
        ref_type = request.get('ref_type', '')
        if ref_type != 'tag':
            return (501, 'Ignoring ref_type %s, only doing releases on tags' % ref_type)

        try:
            tag = request['ref']
        except KeyError:
            return (400, 'Request is missing tag name in "ref" field')

        if self.path[0] != '/':
            return (400, 'Invalid path, should start with /: ' + self.path)

        # turn path into a relative one in the build dir
        return self.release(request['repository']['clone_url'], tag, '.' + self.path)

    @classmethod
    def release(klass, project, tag, script):
        logging.info('Releasing project %s, tag %s, script %s', project, tag, script)
        jobname = 'release-job-%s-%s' % (os.path.splitext(os.path.basename(project))[0], tag)

        # in case we want to restart a release, clean up the old job
        subprocess.call(['oc', 'delete', 'job', jobname])

        job = JOB % {'jobname': jobname, 'git_repo': project, 'tag': tag, 'script': script, 'sink': SINK}
        try:
            oc = subprocess.Popen(['oc', 'create', '-f', '-'], stdin=subprocess.PIPE)
            oc.communicate(job.encode('UTF-8'), timeout=60)
            if oc.wait(timeout=60) != 0:
                raise RuntimeError('creating release job failed with exit code %i' % oc.returncode)
        except (RuntimeError, subprocess.CalledProcessError, subprocess.TimeoutExpired) as e:
            logging.error(str(e))
            return (400, str(e))
        return None


#
# main
#

logging.basicConfig(level=logging.DEBUG)  # INFO

# ensure we have a passwd entry for random UIDs
# https://docs.openshift.com/container-platform/3.7/creating_images/guidelines.html
subprocess.check_call(PASSWD_ENTRY_SCRIPT, shell=True)

os.environ['HOME'] = HOME_DIR

setup()
http.server.HTTPServer(('', 8080), ReleaseHandler).serve_forever()
