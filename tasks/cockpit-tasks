#!/bin/sh

set -e

# If first argument starts with a path no loop
loop=yes
case ${1-} in
    /*)
        loop=no
        ;;
esac

# Set to verbose when looping
if [ $loop = "yes" ]; then
    set -x
fi

# ensure we have a passwd entry for random UIDs
# https://docs.openshift.com/container-platform/3.7/creating_images/guidelines.html
if ! whoami && [ -w /etc/passwd ]; then
    echo "user:x:$(id -u):0:random uid:/work:/sbin/nologin" >> /etc/passwd
    export HOME=/work
fi

# If interactive arguments then just exec
if [ $loop != "yes" ]; then
    if [ ! -d cockpit ]; then
        git clone https://github.com/cockpit-project/cockpit cockpit
    fi
    cd cockpit/
    exec "$@"
fi

# set up custom NPM registry
if [ -n "$NPM_REGISTRY" ]; then
    npm config set registry "$NPM_REGISTRY"
    echo "Set NPM registry to $NPM_REGISTRY"
fi
if [ -r /secrets/npm-registry.crt ]; then
    export NODE_EXTRA_CA_CERTS=/secrets/npm-registry.crt
fi

# let's just do our work in the current directory
WORKDIR="$PWD"

# Set up github user and token
git config --global credential.helper store
echo "https://cockpituous:$(cat ~/.config/github-token)@github.com" > ~/.git-credentials

echo "Starting testing"

function update_repo() {
    dir=$1
    repo_url=$2

    if [ ! -d "$dir" ]; then
        git clone "$repo_url" "$dir"
    elif [ -f "$dir/.git/shallow" ]; then
        # if we ended up with a shallow clone from a previous test, start from
        # scratch, as this is brittle to clean up afterwards
        echo "cockpit-tasks: Shallow commits exist in $dir, cannot reset; re-cloning"
        rm -rf "$dir"
        git clone "$repo_url" "$dir"
    else
        # avoid re-cloning in most cases to save GitHub bandwidth
        git -C "$dir" fetch origin
        git -C "$dir" reset --hard
        git -C "$dir" clean -dxff
        git -C "$dir" checkout origin/master
    fi
}

# wait between 1 and 10 minutes
function slumber() {
    sleep $(shuf -i 60-600 -n 1)
}

work_done=

function run_from_queue() {
    cd "$WORKDIR"/cockpit-project/bots
    if /usr/bin/timeout 12h ./run-queue --amqp "$AMQP_SERVER"; then
        work_done=1
        rm -rf "${TEST_DATA:-/}"/tmp/*
    fi
}

# on mass deployment, avoid GitHub stampede
sleep $(shuf -i 0-120 -n 1)

# Consume from queue 30 times, then restart
for i in $(seq 1 30); do
    work_done=
    update_repo  "$WORKDIR"/cockpit-project/bots https://github.com/cockpit-project/bots
    run_from_queue || true
    # Nothing to do, or failure
    [ -n "$work_done" ] || slumber
done
