#!/bin/sh

set -e

# If first argument starts with a path no loop
loop=yes
case ${1-} in
    /*)
        loop=no
        ;;
esac

# Set to verbose when looping
if [ $loop = "yes" ]; then
    set -x
fi

# ensure symlinks from /build/ are valid even when mounting /cache
mkdir -p /cache/github /cache/images

# ensure we have a passwd entry for random UIDs
# https://docs.openshift.com/container-platform/3.7/creating_images/guidelines.html
if ! whoami && [ -w /etc/passwd ]; then
    echo "user:x:$(id -u):0:random uid:${HOME:-/home/user}:/sbin/nologin" >> /etc/passwd
fi

# If interactive arguments then just exec
if [ $loop != "yes" ]; then
    if [ ! -d cockpit ]; then
        git clone https://github.com/cockpit-project/cockpit cockpit
    fi
    cd cockpit/
    exec "$@"
fi

echo "Starting testing"

function update_repo() {
    dir=$1
    repo_url=$2

    if [ ! -d "$dir" ]; then
        git clone "$repo_url" "$dir"
    elif [ -f "$dir/.git/shallow" ]; then
        # if we ended up with a shallow clone from a previous test, start from
        # scratch, as this is brittle to clean up afterwards
        echo "cockpit-tasks: Shallow commits exist in $dir, cannot reset; re-cloning"
        rm -rf "$dir"
        git clone "$repo_url" "$dir"
    else
        # avoid re-cloning in most cases to save GitHub bandwidth
        git -C "$dir" fetch origin
        git -C "$dir" reset --hard
        git -C "$dir" clean -dxff
        git -C "$dir" checkout origin/master
    fi
}

function task() {
    dir=$1

    (
        # If the tasks file is executable, run it
        if [ -x "$dir"/.tasks ]; then
            cd "$dir/" && ./.tasks

        # If it exists then cat it
        elif [ -e "$dir/.tasks" ]; then
            cat "$dir/.tasks"

        # No tasks found
        else
            echo "echo 'No tasks found in $dir repo' >&2; exit 1"
        fi

    # Remove empty lines, comments, and reverse sort.
    # Then randomly pick one of the first 10 commands
    ) | sed -e 's/#.*$//' -e '/^$/d' | sort -r | head -n 10 | shuf | head -n 1
}

# wait between 1 and 10 minutes
function slumber() {
    sleep $(shuf -i 60-600 -n 1)
}

work_done=

function run_one_task() {
    dir=$1
    repo_url=$2

    update_repo "$1" "$2"

    if [ ! -d "$dir/bots" ]; then
        cp -drl bots/bots "$dir/"
    fi

    # Get a task and execute it, 12 hours max
    line=$(task "$dir")
    if [ -n "$line" ] && /usr/bin/timeout 12h /bin/sh -c "cd '$dir/'; set -ex; $line"; then
        work_done=1
    fi
}

# on mass deployment, avoid GitHub stampede
slumber

# Perform a couple of tasks or waits, then restart
for i in $(seq 1 30); do
    work_done=

    update_repo  bots             https://github.com/cockpit-project/cockpit
    run_one_task cockpit          https://github.com/cockpit-project/cockpit
    run_one_task starter-kit      https://github.com/cockpit-project/starter-kit
    run_one_task cockpit-composer https://github.com/weldr/cockpit-composer
    run_one_task cockpit-podman   https://github.com/cockpit-project/cockpit-podman

    # Nothing to do, or failure
    [ -n "$work_done" ] || slumber
done
