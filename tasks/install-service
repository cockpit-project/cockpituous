#!/bin/sh

# deploy changes to this script with:
# ansible -i inventory -m include_role -a name=tasks-systemd e2e
# ansible -i inventory -m include_role -a name=tasks-systemd -e instances=12 tag_ServiceComponent_Tasks
# ansible -i inventory -m include_role -a name=tasks-systemd -e instances=1 openstack_tasks
#
# See ansible/{aws,psi}/launch-tasks.yml for the parameters.

set -eufx

ENVFILE=/etc/cockpit-tasks.environ
SECRETS=/var/lib/cockpit-secrets
CACHE=/var/cache/cockpit-tasks
IMAGE_STORES=${CACHE}/image-stores
INSTANCES=${INSTANCES:-4}
# assume the host has plenty of RAM, use a tmpfs for /tmp for getting less IO contention; this can be overridden
TMPVOL=${TMPVOL:-"--tmpfs /tmp:size=14g"}


systemctl stop cockpit-tasks-monitor.service || true
rm -f /etc/cockpit-task-*.environ
rm -f /etc/containers/systemd/cockpit-*.container

mkdir -p "${SECRETS}/tasks" "${SECRETS}/webhook" "${CACHE}/images"
chown -R 1111:1111 "${SECRETS}" "${CACHE}"
chcon -R -t container_file_t "${SECRETS}" "${CACHE}"

if [ -e "${SECRETS}/tasks/npm-registry.crt" ]; then
    NODE_EXTRA_CA_CERTS=/secrets/npm-registry.crt
fi

# ensure this always exists
touch "$IMAGE_STORES"

cat <<EOF > "${ENVFILE}"
INSTANCES=${INSTANCES}
HOST_HOSTNAME=${HOSTNAME}
IMAGE_STORES=${IMAGE_STORES}
NODE_EXTRA_CA_CERTS=${NODE_EXTRA_CA_CERTS:-}
NPM_REGISTRY=${NPM_REGISTRY:-}
TEST_CACHE=${CACHE}
TEST_JOBS=${TEST_JOBS:-8}
TEST_NOTIFICATION_MX=${TEST_NOTIFICATION_MX:-}
TEST_NOTIFICATION_TO=${TEST_NOTIFICATION_TO:-}
TMPVOL="${TMPVOL}"
EOF

cat <<EOF > /etc/containers/systemd/cockpit-tasks-monitor.container
[Unit]
Requires=podman.socket

[Container]
Image=quay.io/cockpit/tasks
Label=io.containers.autoupdate=registry
EnvironmentFile=/etc/cockpit-tasks.environ
SecurityLabelDisable=true
HostName=%H-monitor
Exec=/usr/local/bin/cockpit-run-run-queue
User=root

Volume=/run/podman:/run/podman:ro
Volume=/etc/cockpit-tasks.environ:/etc/cockpit-tasks.environ:ro
Volume=/etc/cockpit-wrapper.sh:/usr/local/bin/cockpit-wrapper:ro
Volume=/etc/cockpit-run-run-queue.sh:/usr/local/bin/cockpit-run-run-queue:ro

[Install]
# Start by default on boot
WantedBy=default.target
EOF

cat <<EOF > /etc/cockpit-run-run-queue.sh
#!/bin/sh

set -eux

git clone https://github.com/cockpit-project/bots
cd bots

for i in \$(seq '${INSTANCES}'); do
    INSTANCE=\$i sleep Inf &
done

wait
EOF
chmod +x /etc/cockpit-run-run-queue.sh

cat <<EOF > /etc/cockpit-wrapper.sh
#!/bin/sh

set -eux

podman-remote \
    run \
        --rm \
        --device=/dev/kvm \
        --memory=24g \
        --pids-limit=16384 \
        --shm-size=1024m \
        ${TMPVOL:-} \
        --hostname="\${INSTANCE:-0}-${HOSTNAME}" \
        --name="cockpit-tasks-\${INSTANCE:-0}" \
        --env-file='${ENVFILE}' \
        --volume='${CACHE}'/images:/cache/images:rw \
        --volume='${SECRETS}'/tasks:/secrets:ro \
        --volume='${SECRETS}'/webhook:/run/secrets/webhook:ro \
        --volume='${IMAGE_STORES}':/work/.config/cockpit-dev/image-stores:ro \
        "\${TASK_CONTAINER:-quay.io/cockpit/tasks:latest}" \
        "\$@"
EOF
chmod +x /etc/cockpit-wrapper.sh

systemctl daemon-reload
systemctl start cockpit-tasks-monitor
