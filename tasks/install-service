#!/bin/sh

set -eufx

SECRETS=/var/lib/cockpit-secrets
CACHE=/var/cache/cockpit-tasks
INSTANCES=${INSTANCES:-3}

if RUNC=$(which podman 2>/dev/null); then
    UNIT_DEPS=''
    DEVICES="--device=/dev/kvm"
    NETWORK='--net=slirp4netns'  # isolate containers from each other
    NETWORK_SETUP=''
    NETWORK_TEARDOWN=''
else
    RUNC=$(which docker)
    DEVICES=''  # relying on oci-kvm-hook
    NETWORK='--network=cockpit-tasks-%i'
    NETWORK_SETUP="ExecStartPre=-$RUNC network rm cockpit-tasks-%i
ExecStartPre=$RUNC network create --driver bridge cockpit-tasks-%i"
    NETWORK_TEARDOWN="ExecStop=$RUNC network rm cockpit-tasks-%i"
    UNIT_DEPS="Requires=docker.service
After=docker.service"
fi

mkdir -p $SECRETS/tasks $SECRETS/webhook $CACHE
chown -R 1111:1111 $SECRETS $CACHE
chcon -R -t container_file_t $SECRETS $CACHE

systemctl stop 'cockpit-tasks@*.service'

cat <<EOF > /etc/systemd/system/cockpit-tasks@.service
[Unit]
Description=Cockpit Tasks %i
$UNIT_DEPS

[Service]
Environment="TEST_JOBS=8"
Environment="TEST_CACHE=$CACHE"
Environment="TEST_SECRETS=$SECRETS"
Environment="TEST_PUBLISH=${TEST_PUBLISH:-sink}"
Environment="NPM_REGISTRY=${NPM_REGISTRY:-}"
Restart=always
RestartSec=60
# give image pull enough time
TimeoutStartSec=10min
ExecStartPre=-$RUNC rm -f cockpit-tasks-%i
ExecStartPre=/usr/bin/flock /tmp/cockpit-image-pull $RUNC pull cockpit/tasks
ExecStartPre=$RUNC pull cockpit/tasks
$NETWORK_SETUP
ExecStart=$RUNC run --name=cockpit-tasks-%i --hostname=%i-%H $DEVICES $NETWORK --storage-opt size=50G --volume=\${TEST_CACHE}:/cache:rw --volume=\${TEST_SECRETS}/tasks:/secrets:ro --volume=\${TEST_SECRETS}/webhook:/run/secrets/webhook:ro --shm-size=1024m --user=1111 --env=NPM_REGISTRY=\${NPM_REGISTRY} --env=TEST_JOBS=\${TEST_JOBS} --env=TEST_PUBLISH=\${TEST_PUBLISH} --env=AMQP_SERVER=amqp-cockpit.apps.ci.centos.org:443 cockpit/tasks
ExecStop=$RUNC rm -f cockpit-tasks-%i
$NETWORK_TEARDOWN

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload

for i in `seq $INSTANCES`; do systemctl enable --now cockpit-tasks@$i; done
