#!/usr/bin/env python3
# Mock GitHub API server for testing an opened PR or an issue for an image-refresh
# You can run this manually in `tasks/run-local.sh -i` with `podman cp` and running
# cd bots
# PYTHONPATH=. ./mock-github cockpit-project/bots $(git rev-parse HEAD) &
# export GITHUB_API=http://127.0.0.7:8443
# PYTHONPATH=. ./mock-github --print-pr-event cockpit-project/bots $(git rev-parse HEAD) | \
#     ./publish-queue --amqp localhost:5671 --queue webhook
#
# and then two `./run-queue --amqp localhost:5671`
# first to process webhook → tests-scan → public, second to actually run it

import argparse
import json
import os
import tempfile

from task.test_mock_server import MockHandler, MockServer

repo = None
sha = None
log = None


class Handler(MockHandler):
    def do_GET(self):
        if log is not None:
            print("GET", self.path, file=log)
            log.flush()

        if self.path in self.server.data:
            self.replyJson(self.server.data[self.path])
        elif self.path.startswith(f'/repos/{repo}/pulls?'):
            self.replyJson([self.server.data[f'/repos/{repo}/pulls/1']])
        elif self.path == f'/repos/{repo}/pulls/2':
            # image-refresh issue converted into PR
            self.replyJson({
                **self.server.data[f'/repos/{repo}/issues/2'],
                "head": {"sha": "a1b2c3"},
            })
        elif self.path == f'/{repo}/{sha}/.cockpit-ci/container':
            self.replyData('quay.io/cockpit/tasks')
        else:
            self.send_error(404, 'Mock Not Found: ' + self.path)

    def do_POST(self):
        if log is not None:
            print("POST", self.path, self.rfile.read1().decode(), file=log)
            log.flush()

        if self.path.startswith(f'/repos/{repo}/statuses/{sha}'):
            self.replyJson({})
        # new SHA from mock-pushed PR #2 for image-refresh
        elif self.path.startswith(f'/repos/{repo}/statuses/a1b2c3'):
            self.replyJson({})
        elif self.path.startswith(f'/repos/{repo}/issues/2'):
            # updates the issue to "in progress", sets label, adds comment etc.; maybe keep state and assert?
            self.replyJson({})
        elif self.path == f'/repos/{repo}/pulls':
            # image-refresh creates a PR for a refresh isssue
            self.replyJson({
                **GITHUB_DATA[f'/repos/{repo}/issues/2'],
                "head": {"sha": "987654"},
            })
        else:
            self.send_error(405, 'Method not allowed: ' + self.path)


argparser = argparse.ArgumentParser()
argparser.add_argument('--port', type=int, default=8443, help="Port to listen on (default: %(default)s)")
argparser.add_argument('--print-pr-event', action='store_true',
                       help="Print GitHub webhook pull_request event and exit")
argparser.add_argument('--print-image-refresh-event', action='store_true',
                       help="Print GitHub webhook issue event for an image-refresh and exit")
argparser.add_argument('--log', metavar="PATH", help="Log requests to this file")
argparser.add_argument('--cockpituous-sha', metavar="SHA", help="resolve cockpituous main branch to this SHA")
argparser.add_argument('repo', metavar='USER/PROJECT', help="GitHub user/org and project name")
argparser.add_argument('sha', help="SHA to test in repo for the mock PR")
args = argparser.parse_args()
repo = args.repo
sha = args.sha

ADDRESS = ('127.0.0.7', args.port)

GITHUB_DATA = {
    f'/repos/{repo}': {
        "default_branch": "main",
    },
    f'/repos/{repo}/pulls/1': {
        'title': 'mock PR',
        'number': 1,
        'state': 'open',
        'body': "This is the body",
        'base': {'repo': {'full_name': repo}, 'ref': 'main'},
        'head': {'sha': args.sha, 'user': {'login': repo.split('/')[0]}},
        'labels': [],
        'updated_at': 0,
    },
    f'/repos/{repo}/commits/{args.sha}/status?page=1&per_page=100': {
        'state': 'pending',
        'statuses': [],
        'sha': sha,
    },
    f'/repos/{repo}/issues/2': {
        'title': 'Refresh foonux image',
        'number': 2,
        'body': "blabla\n - [ ] image-refresh foonux\n",
        # is in our allowlist
        'user': {"login": "cockpit-project"},
        'labels': [{"name": "bot"}],
        'url': f'http://{ADDRESS[0]}/{repo}/issues/2',
    },
    f'/repos/{repo}/git/ref/heads/main': {
        'object': {'sha': sha},
    },
    # for cross-project test; job-runner uses it to determine the clone SHA
    '/repos/cockpit-project/cockpituous/git/refs/heads/main': {
        # that fallback is strictly wrong, but good enough
        'object': {'sha': args.cockpituous_sha or "main"},
    },
}

if args.print_pr_event:
    print(json.dumps({
        'event': 'pull_request',
        'request': {
            'action': 'opened',
            'pull_request': GITHUB_DATA[f'/repos/{repo}/pulls/1']
        }
    }, indent=4))
    exit(0)

if args.print_image_refresh_event:
    print(json.dumps({
        'event': 'issues',
        'request': {
            'action': 'opened',
            'issue': GITHUB_DATA[f'/repos/{repo}/issues/2'],
            'repository': {'full_name': repo},
        }
    }, indent=4))
    exit(0)

if args.log:
    log = open(args.log, 'w')
temp = tempfile.TemporaryDirectory()
cache_dir = os.path.join(temp.name, 'cache')
os.environ['XDG_CACHE_HOME'] = cache_dir
server = MockServer(ADDRESS, Handler, GITHUB_DATA)
server.start()
print(f'export GITHUB_API=http://{ADDRESS[0]}:{ADDRESS[1]}')
