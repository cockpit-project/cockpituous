#!/bin/bash -eu
#
# release-debian
#
# A release script that publishes packages to a debian repository.
#
# Arguments are described here. Most arguments have an equivalent envvar.
#
# -f tbz     RELEASE_TARBALL=tbz        The tarball
# -r repo    RELEASE_DEBIAN_REPO=repo   Generated Debian repository
#
# -q         RELEASE_QUIET=1            Make output more quiet
# -x         RELEASE_TRANSACTION=1      SIGSTOP before pushing the dist-git commit
# -v         RELEASE_VERBOSE=1          Make output more verbose
# -z         RELEASE_CHECK=1            Check credentials only
#

set -eu

TRANSACTION=${RELEASE_TRANSACTION:-0}
CHECK=${RELEASE_CHECK:-0}
QUIET=${RELEASE_QUIET:-0}
VERBOSE=${RELEASE_VERBOSE:-0}

TARBALL="${RELEASE_TARBALL:-}"
TAG=${RELEASE_TAG:-$(git describe --abbrev=0)}
DEBIAN_REPO=${RELEASE_DEBIAN_REPO:-debian-apt}

usage()
{
    echo "usage: release-debian [-qvxz] [-t tag] [-d source] [-r repository]" >&2
    exit ${1-2}
}

trace()
{
    if [ $QUIET -eq 0 ]; then
        echo "> $@" >&2
    fi
}

message()
{
    echo "release-debian: $@" >&2
}

check()
{
    true
}

trim_contents()
{
    # Remove line with just tag name. Remove signature
    sed -e '/^\s*'$TAG'\s*$/d' -e '/-----BEGIN/,/-----END/d'
}

changelog_lines()
{
    local date author body
    date="$(git for-each-ref --format='%(taggerdate:rfc)' "refs/tags/$TAG")"
    author="Cockpituous <cockpituous@gmail.com>"
    body="$(git for-each-ref --format='%(contents)' "refs/tags/$TAG" | trim_contents | sed -e 's/^/  /')"

    printf "cockpit (%s) experimental; urgency=medium\n\n%s\n\n -- %s  %s\n" "$1" "$body" "$author" "$date"
}

prepare()
{
    local installed
    local debversion="$TAG-0"

    trace "Creating Debian repository"

    printf "USENETWORK=yes\n" > pbuilderrc

    mkdir -p $DEBIAN_REPO/conf
    cat > $DEBIAN_REPO/conf/distributions <<EOF
Origin: Cockpit
Label: Cockpit
Codename: unstable
Architectures: source amd64
Components: main
Description: Apt repository for Cockpit
SignWith: default
EOF

    if [ -z "$(reprepro --silent -b $DEBIAN_REPO listfilter unstable \$Version\(==$TAG\))" ]; then

        # build source package
        rm -rf debian-tmp; mkdir debian-tmp
        ln -sf $(readlink -f $TARBALL) cockpit_$TAG.orig.tar.xz
        tar -C debian-tmp -xf $TARBALL --strip-components=1
        ( cd debian-tmp
          mv ./tools/debian .
          changelog_lines $debversion >debian/changelog

          # - don't install or package test assets
          sed -i -e 's/install-test-assets//' debian/rules
          sed -i -e '/Package: cockpit-test-assets/,/^$/d' debian/control

          debuild -S
        )
        reprepro -b $DEBIAN_REPO includedsc unstable cockpit_$debversion.dsc

        # build binary package
        sudo pbuilder clean
        sudo pbuilder update --distribution unstable
        sudo pbuilder build --configfile pbuilderrc \
                            --hookdir /etc/pbuilder/hooks \
                            cockpit_$debversion.dsc

        reprepro -b $DEBIAN_REPO includedeb unstable /var/cache/pbuilder/result/*.deb
    else
        trace "Skipping debian build"
    fi
}

commit()
(
    trace "Publishing Debian repository"

    rsync --delete -a -e ssh $DEBIAN_REPO/ fedorapeople.org:/project/cockpit/debian
)

while getopts "f:t:r:qvxz" opt; do
    case "$opt" in
    f)
        TARBALL="$OPTARG"
        ;;
    t)
        TAG="$OPTARG"
        ;;
    r)
        DEBIAN_REPO="$OPTARG"
        ;;
    q)
        QUIET=1
        VERBOSE=0
        ;;
    v)
        QUIET=0
        VERBOSE=1
        ;;
    x)
        TRANSACTION=1
        ;;
    z)
        CHECK=1
        ;;
    -)
        break
        ;;
    *)
        usage
        ;;
    esac
done

shift $(expr $OPTIND - 1)

if [ $# -ne 0 ]; then
    usage
fi

if [ $CHECK -eq 1 ]; then
    check "$1"
    exit 0
fi

if [ -z "$TAG" ]; then
    message "could not find a tag to release"
    exit 2
fi

if [ -z "$TARBALL" ]; then
    message "no tarball input specified"
    exit 2
elif [ ! -f "$TARBALL" ]; then
    message "tarball source not found: $TARBALL"
    exit 1
fi

prepare

if [ $TRANSACTION -eq 1 ]; then
    kill -STOP $$
fi

commit

