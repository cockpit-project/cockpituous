#!/bin/bash -eu
#
# release-debian
#
# TODO: This script is currently very Cockpit specific
# A release script that publishes Cockpit to a debian repository.
#

set -eu

TRANSACTION=${RELEASE_TRANSACTION:-0}
CHECK=${RELEASE_CHECK:-0}
QUIET=${RELEASE_QUIET:-0}
VERBOSE=${RELEASE_VERBOSE:-0}
DSC="${RELEASE_DSC:-}"

TAG=""
REPOSITORY=""
WORKDIR=""

REPREPRO="reprepro --ignore=undefinedtarget"

usage()
{
    echo "usage: release-debian [-qvx] -p dsc repository distribution ..." >&2
    exit ${1-2}
}

trace()
{
    if [ $QUIET -eq 0 ]; then
        echo "> $@" >&2
    fi
}

message()
{
    echo "release-debian: $@" >&2
}

check()
{
    true
}

distributions() {
    while [ $# -gt 0 ]; do
        cat <<EOF
Origin: Cockpit
Label: Cockpit
Codename: $1
Architectures: source amd64 i386
Components: main
Description: Apt repository for Cockpit
SignWith: default

EOF
        shift
    done
}

# Given a dsc path, figure out the version number it represents
#  $1: The dsc path
dsc_version()
{
    echo "$1" | sed -ne 's/.*_\([0-9.]\+\)-.*/\1/p'
}

# Check if the given query matches anything in the debian repo
#  $1: Path to debian repo
#  $2: The distribution
#  $3: The query in reprepro listfilter format
repo_contains()
{
    $REPREPRO --silent -b "$1" listfilter "$2" "$3" | while read line; do
        return 0
    done
    return 1
}

prepare()
{
    local distribution basetgz

    trace "Retrieving Debian repository"

    WORKDIR=$(mktemp --directory debian-apt.XXXXXX)
    mkdir -p $WORKDIR/_repo/conf $WORKDIR/debuild/

    # Retrieve the upstream repository
    rsync --delete -a -e ssh "$REPOSITORY"/./ $WORKDIR/_repo/

    # Generate a distribution file
    distributions "$@" > $WORKDIR/_repo/conf/distributions

    cat > $WORKDIR/pbuilderrc <<EOF
USENETWORK=yes
APTGETOPT=(-o Acquire::Pdiffs=false)
EOF

    # Figure out what needs to be built
    while [ $# -gt 0 ]; do
        distribution="$1"
        shift

        if repo_contains $WORKDIR/_repo "$distribution" "\$Version\(==$TAG\)"; then
            trace "Skipping debian $distribution build"
            continue
        fi

        trace "Performing Debian $distribution build"

        # Put the source into the repo if not already there
        if ! repo_contains $WORKDIR/_repo "$distribution" "\$Version\(==$TAG\),\$Architecture\(==source\)"; then
            $REPREPRO -b $WORKDIR/_repo includedsc $distribution $DSC
        fi

        # Append distribution to version, so that we can have packages for the
        # multiple distributions in the same repo
        (cd $WORKDIR
        dpkg-source --extract $DSC $distribution
        sed -i "s/$TAG-0/$TAG-0~$distribution/" $distribution/debian/changelog
        sed -i "s/experimental/$distribution/" $distribution/debian/changelog
        # Some Debian/Ubuntu releases might not have all our build dependencies
        # or may want to disable particular features. If present, this script
        # will in-place modify the packaging for the given release.
        if [ -x $distribution/debian/adjust-for-release ]; then
            $distribution/debian/adjust-for-release $distribution
        fi
        dpkg-source --build $distribution
        )

        # Build debian binary packages
        mkdir -p $WORKDIR/$distribution
        basetgz=/var/cache/pbuilder/$distribution.tgz
        sudo pbuilder clean --distribution $distribution --basetgz $basetgz
        sudo pbuilder update --configfile $WORKDIR/pbuilderrc --distribution $distribution --basetgz $basetgz
        sudo pbuilder build --configfile $WORKDIR/pbuilderrc --distribution $distribution --basetgz $basetgz \
                            --hookdir /etc/pbuilder/hooks --buildresult $WORKDIR/$distribution \
                            "$WORKDIR/cockpit_$TAG-0~$distribution.dsc"

        $REPREPRO -b $WORKDIR/_repo includedeb $distribution $WORKDIR/$distribution/*.deb
    done

    # Also export source and package listings for empty architectures
    $REPREPRO -b $WORKDIR/_repo export
}

commit()
(
    trace "Publishing Debian repository"

    rsync --delete -a -e ssh $WORKDIR/_repo/./ "$REPOSITORY"

    rm -rf $WORKDIR
)

while getopts "p:qvxz" opt; do
    case "$opt" in
    p)
        DSC="$OPTARG"
        ;;
    q)
        QUIET=1
        VERBOSE=0
        ;;
    v)
        QUIET=0
        VERBOSE=1
        ;;
    x)
        TRANSACTION=1
        ;;
    z)
        CHECK=1
        ;;
    -)
        break
        ;;
    *)
        usage
        ;;
    esac
done

shift $(expr $OPTIND - 1)

if [ $# -lt 2 ]; then
    usage
fi

if [ $VERBOSE -eq 1 ]; then
    set -x
fi

if [ $CHECK -eq 1 ]; then
    check "$1"
    exit 0
fi

if [ -z "$DSC" ]; then
    message "no debian source file specified"
    exit 2
elif [ ! -f "$DSC" ]; then
    message "debian source file not found: $DSC"
    exit 1
fi

# The version number comes from the dsc
DSC=$(realpath $DSC)
TAG=$(dsc_version $DSC)
if [ -z "$TAG" ]; then
    message "could not identify version number for debian source file: $DSC"
    exit 2
fi

REPOSITORY="$1"
if [ -z "$REPOSITORY" ]; then
    message "invalid empty repository rsync url: $REPOSITORY"
    exit 2
fi

shift
prepare "$@"

if [ $TRANSACTION -eq 1 ]; then
    kill -STOP $$
fi

commit

