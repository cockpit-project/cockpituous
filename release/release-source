#!/bin/sh -euf
#
# release-source
#
# A script that takes a git repo in the current working directory and builds
# a tarball from a tag.
#
# $ git tag -as 122
# $ release-source -o source-output
#
# Will symlink the tarball to the path you specify, so it's easily retrieved.
# while retaining its original name in the linked to file.
#
# If no tag is specified then the most recent numeric tag is used.
#
# Arguments are described here. Most arguments have an equivalent envvar.
#
# -f dir     RELEASE_SOURCE=dir     Directory to place source at. If prepopulated
#                                   with source then build will be skipped.
# -q         RELEASE_QUIET=1        Make output more quiet
# -t tag     RELEASE_TAG=tag        When no patches are specified, this is a git
#                                   repository tag to get patches until HEAD
#                                   base tarball and defaults to latest tag.
# -v         RELEASE_VERBOSE=1      Make output more verbose
#

set -euf

QUIET=${RELEASE_QUIET:-0}
VERBOSE=${RELEASE_VERBOSE:-0}
SOURCE=${RELEASE_SOURCE:-}
TAG=${RELEASE_TAG:-}

MAKE="make -j$(nproc)"

# When building tarballs it's important to have a consistent
# locale and charmap in particular when generating documentation
LANG=en_US.UTF-8
export LANG

usage()
{
    echo "usage: release-source [-qv] [-t TAG] -f SOURCE" >&2
    exit ${1:-2}
}

trace()
{
    if [ $QUIET -eq 0 ]; then
        echo "> $@" >&2
    fi
}

message()
{
    echo "release-source: $@" >&2
}

# Copies all tarballs from build into source directory, clears
# all previously existing tarballs, and prints name of first tarball
#  $1: The make build directory
#  $2: The directory to put tarballs
output_tarballs()
{
    local archive name

    archive=
    printf 'include Makefile\nprint-DIST_ARCHIVES:\n\t@echo $(DIST_ARCHIVES)' \
        | make -C "$1" -s -f - print-DIST_ARCHIVES | tr ' ' '\n' | while read name; do

        # Once we see the first archive, clear old stuff
        if [ -z "$archive" ]; then
            find "$2" -maxdepth 1 -name "*-*.tar.*" -delete
            archive="$2/$name"
            echo "$archive"
        fi

        cp -t "$2" "$1/$name"
    done
}


# Build release tarball
prepare()
{
    local repodir commit archive archives author date name exist

    repodir=$(mktemp --directory source.XXXXXX)
    mkdir -p "$SOURCE"

    # Clone the repo into our repodir
    git clone -q . $repodir
    git -C $repodir checkout -q --detach $TAG

    trace "Creating tarball"

    if [ -x ./autogen.sh ]; then
        # autotools based projects
        (cd $repodir; ./autogen.sh && $MAKE dist)
        output_tarballs $repodir $SOURCE
    else
        # plain Makefile projects
        $MAKE -C $repodir dist || $MAKE -C $repodir dist-gzip
        archive=$(find $repodir -maxdepth 1 -name "*-${TAG}.tar.*")
        if [ "$(echo "$archive" | wc -l)" != 1 ]; then
            echo "ERROR: Expecting exactly one *-${TAG}.tar.*" >&2
            exit 1
        fi
        find "$SOURCE" -maxdepth 1 -name "*-*.tar.*" -delete
        cp "$archive" "$SOURCE"
    fi
    rm -rf $repodir
}

while getopts "f:p:qt:vx" opt; do
    case "$opt" in
    f)
        SOURCE="$OPTARG"
        ;;
    q)
        QUIET=1
        VERBOSE=0
        ;;
    t)
        TAG="$OPTARG"
        ;;
    v)
        QUIET=0
        VERBOSE=1
        ;;
    -)
        break
        ;;
    *)
        usage
        ;;
    esac
done

shift $(expr $OPTIND - 1)

if [ $VERBOSE -eq 1 ]; then
    set -x
elif [ $QUIET -eq 1 ]; then
    MAKE="make --silent"
fi

if [ -z "$SOURCE" ]; then
    message "no source directory specified"
    exit 2
fi

# The tag for the release
if [ -z "$TAG" ]; then
    TAG=$(git describe --match='[0-9]*' --abbrev=0 || true)
    if [ -z "$TAG" ]; then
        message "could not find a tag to build"
        exit 2
    fi
fi

prepare
