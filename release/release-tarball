#!/bin/sh -euf
#
# release-tarball
#
# A script that creates tarball from an automake style git repository for
# the latest tag. Run it from within a git checkout.
#
# $ git tag -as 0.55
# $ release-tarball -f /path/to/linkname
#
# Will link the tarball to the path you specify, so it's easily retrieved
#
# Arguments are described here. Most arguments have an equivalent envvar.
#
# -f tgz     RELEASE_TARBALL=tbz    Path to link tarball to
# -t 0.X     RELEASE_TAG=0.X        The tag to create release from
#                                   default: latest tag
# -q         RELEASE_QUIET=1        Make output more quiet
# -v         RELEASE_VERBOSE=1      Make output more verbose
# -z         RELEASE_CHECK=1        Check access and configuration
#

set -euf

CHECK=${RELEASE_CHECK:-0}
TAG=${RELEASE_TAG:-}
TRANSACTION=${RELEASE_TRANSACTION:-0}
QUIET=${RELEASE_QUIET:-0}
VERBOSE=${RELEASE_VERBOSE:-0}
TARBALL=${RELEASE_TARBALL:-}

# When building a tarball it's important to have a consistent
# locale and charmap in particular when generating documentation
LANG=en_US.UTF-8
export LANG

usage()
{
    echo "usage: release-tarball [-qvxz] [-t TAG] -f TARBALL" >&2
    exit ${1-2}
}

trace()
{
    if [ $QUIET -eq 0 ]; then
        echo "> $@" >&2
    fi
}

check()
{
    git status > /dev/null
}

message()
{
    echo "release-tarball: $@" >&2
}

prepare()
{
    local archive autogen

    trace "Checking out $TAG"

    git fetch origin
    git reset --hard HEAD
    git clean -fd
    git checkout --detach $TAG

    mkdir -p build
    rm -rf build/*

    cd build

    trace "Setting up the build"
    ../autogen.sh --prefix=/usr
    make

    # Print out the tarball
    printf 'include Makefile\nprint-DIST_ARCHIVES:\n\t@echo $(DIST_ARCHIVES)' > GNUmakefile
    archive=$(make -s print-DIST_ARCHIVES)

    if [ ! -f "$archive" ]; then
        trace "Building the tarball"
        make -j1 clean distcheck
    else
        trace "Skipping tarball build"
    fi

    trace "Linking tarball: $archive $TARBALL"

    cd ..
    ln -snf build/$archive "$TARBALL"
}

while getopts "f:qt:vxz" opt; do
    case "$opt" in
    f)
        TARBALL="$OPTARG"
        ;;
    q)
        QUIET=1
        VERBOSE=0
        ;;
    t)
        TAG="$OPTARG"
        ;;
    v)
        QUIET=0
        VERBOSE=1
        ;;
    x)
        TRANSACTION=1
        ;;
    z)
        CHECK=1
        ;;
    -)
        break
        ;;
    *)
        usage
        ;;
    esac
done

shift $(expr $OPTIND - 1)

if [ $# -ne 0 ]; then
    usage
fi

# The tag for the release
if [ -z "$TAG" ]; then
    TAG=$(git describe --abbrev=0 || true)
    if [ -z "$TAG" ]; then
        message "could not find a tag to build"
        exit 2
    fi
fi

if [ -z "$TARBALL" ]; then
    message "no tarball output specified"
    exit 2
fi

if [ $CHECK -eq 1 ]; then
    check
else
    prepare
fi
