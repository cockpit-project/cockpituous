#!/usr/bin/python3

import os
import logging
import subprocess
import shutil
import http.server

import github_handler

HOME_DIR = '/tmp/home'
WEBHOOK_SECRETS = '/run/secrets/webhook'
# FIXME: make this a request parameter
SINK = 'fedorapeople.org'

# Kubernetes Job template for actually running a release
JOB = '''---
apiVersion: batch/v1
kind: Job
metadata:
  name: %(jobname)s
spec:
  ttlSecondsAfterFinished: 0
  template:
    spec:
      containers:
        - name: release
          image: cockpit/release
          workingDir: /build
          args: [ "-r", "%(git_repo)s", "-t", "%(tag)s", "%(script)s" ]
          volumeMounts:
          - name: secrets
            mountPath: /run/secrets/release
            readOnly: true
          env:
          - name: RELEASE_SINK
            value: %(sink)s
      volumes:
      - name: secrets
        secret:
          secretName: cockpit-release-secrets
      restartPolicy: Never
'''

def setup():
    '''Prepare temporary home directory from secrets'''

    if os.path.isdir(HOME_DIR):
        return
    logging.debug('Initializing %s', HOME_DIR)
    os.makedirs(HOME_DIR)

    # install credentials from secrets volume; copy to avoid world-readable files
    # (which e. g. ssh complains about), and to make them owned by our random UID.
    old_umask = os.umask(0o77)
    for f in os.listdir(WEBHOOK_SECRETS):
        if f.startswith('..'):
            continue  # secrets volume internal files
        src = os.path.join(WEBHOOK_SECRETS, f)
        dest = os.path.join(HOME_DIR, f.replace('--', '/'))
        os.makedirs(os.path.dirname(dest), exist_ok=True)
        shutil.copyfile(src, dest)
    os.umask(old_umask)


class ReleaseHandler(github_handler.GithubHandler):
    def handle_event(self, event, request):
        if event != 'create':
            return (501, 'unsupported event ' + event)

        ref_type = request.get('ref_type', '')
        if ref_type != 'tag':
            return (501, 'Ignoring ref_type %s, only doing releases on tags' % ref_type)

        try:
            tag = request['ref']
        except KeyError:
            return (400, 'Request is missing tag name in "ref" field')

        if self.path[0] != '/':
            return (400, 'Invalid path, should start with /: ' + self.path)

        # turn path into a relative one in the build dir
        return self.release(request['repository']['clone_url'], tag, '.' + self.path)

    @classmethod
    def release(klass, project, tag, script):
        logging.info('Releasing project %s, tag %s, script %s', project, tag, script)
        jobname = 'release-job-%s-%s' % (os.path.splitext(os.path.basename(project))[0], tag)
        job = JOB % {'jobname': jobname, 'git_repo': project, 'tag': tag, 'script': script, 'sink': SINK}
        try:
            oc = subprocess.Popen(['oc', 'create', '-f', '-'], stdin=subprocess.PIPE)
            oc.communicate(job.encode('UTF-8'), timeout=60)
            if oc.wait(timeout=60) != 0:
                raise RuntimeError('creating release job failed with exit code %i' % oc.returncode)
        except (RuntimeError, subprocess.CalledProcessError, subprocess.TimeoutExpired) as e:
            logging.error(str(e))
            return (400, str(e))
        return None


#
# main
#

logging.basicConfig(level=logging.DEBUG)  # INFO

os.environ['HOME'] = HOME_DIR

setup()
http.server.HTTPServer(('', 8080), ReleaseHandler).serve_forever()
