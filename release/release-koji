#!/bin/sh -euf
#
# release-koji
#
# A script that does a Koji dist-git commit and build based on an srpm.
# The changelog from dist-git and the srpm are merged, and an appropriate
# revision is chosen based on the version and latest dist-git revision.
#
# $ release-koki -p cockpit-122.src.rpm f24
#
# The spec file will be updated and committed, along with the new source
# tarball. An SRPM and scratch build will be done to test things, after
# which the commit will be pushed to dist-git and the real build happens.
#
# Arguments are described here. Most arguments have an equivalent envvar.
#
# -k         RELEASE_CONTINUE=1     Ignore build failure and skip the
#                                   branch without failing delivery.
# -p SRPM    RELEASE_SRPM=srpm      The srpm to distribute
# -q         RELEASE_QUIET=1        Make output more quiet
# -v         RELEASE_VERBOSE=1      Make output more verbose
#
# Specify a distgit branch to build as a command line argument.
#

set -euf

# Various arguments
TRANSACTION=${RELEASE_TRANSACTION:-0}
QUIET=${RELEASE_QUIET:-0}
VERBOSE=${RELEASE_VERBOSE:-0}
CONTINUE=${RELEASE_CONTINUE:-0}
SRPM=${RELEASE_SRPM:-}
CHECK=${RELEASE_CHECK:-0}

# Other globals
PACKAGE=""
WORKDIR=""
BRANCH=""

usage()
{
    echo "usage: release-koji [-kqv] -p SRPM BRANCH" >&2
    exit ${1-2}
}

trace()
{
    if [ $QUIET -eq 0 ]; then
        echo "> $@" >&2
    fi
}

message()
{
    echo "release-koji: $@" >&2
}

# Get the specified variable from a spec file
#  $1: The name of the variable
#  $2: The spec file
spec_variable()
{
    # Note that the spec file can have multiple subpackages, just get first
    rpm -q --specfile --queryformat="%{$1}\n\n" --undefine dist "$2" | sed -e '/^$/,$d'
}

# Get all values for specified variable from spec file
#  $1: The name of the variable
#  $2: The spec file
spec_variables()
{
    rpm -q --specfile --queryformat="[%{$1}\n]" --undefine dist "$2"
}

# Get the specified variable name from a source rpm
#  $1: The name of the variable
#  $2: The source rpm file
srpm_variable()
{
    # Note that the srpm file can have multiple subpackages, just get first
    rpm -qp --queryformat="%{$1}\n\n" "$2" | sed -e '/^$/,$d'
}

# Get all values for specified variable from spec file
#  $1: The name of the variable
#  $2: The spec file
srpm_variables()
{
    rpm -qp --queryformat="[%{$1}\n]" "$2"
}

# Called to check if we can perform our task
check()
{
   "$(dirname $0)/check-git-rw" pkgs.fedoraproject.org "$PACKAGE.git"
    fedora-cert -v -u prevent-prompt
}

# Prepare our task but don't push any changes
prepare()
{
    local patch file spec logcut logfile spec oldver oldlog version release logtext srpm already

    WORKDIR=$(mktemp --directory koji.XXXXXX)
    already=0

    trace "Checking out koji package $PACKAGE"

    fedpkg clone -b "$BRANCH" "$PACKAGE" $WORKDIR

    spec=$WORKDIR/$PACKAGE.spec

    # Get data from the old one
    oldver=$(spec_variable VERSION $spec)
    oldlog=$(spec_variable CHANGELOGTEXT $spec)
    oldrev=$(spec_variable RELEASE $spec)

    # And the new data
    version=$(srpm_variable VERSION $SRPM)
    logtext=$(srpm_variable CHANGELOGTEXT $SRPM)

    # Already updated this file, then idempotent and skip
    if [ "$oldver" = "$version" -a "$oldlog" = "$logtext" ]; then
        trace "Already have NVR $PACKAGE-$oldver-$oldrev present"
        already=1

    # Otherwise it's time to update the spec file
    else
        trace "Updating spec file"

        logcut=$(spec_variable CHANGELOGNAME $spec)
        logfile=$WORKDIR/changelog
        sed '1,/%changelog/d' "$spec" > $logfile

        # Bump the release number
        if [ "$oldver" = "$version" ]; then
            release=$(expr ${oldrev:-1} + 1)
        else
            release="1"
        fi

        # Remove all the old patches
        # TODO: We would like to read this from the old spec file, but rpm comes back empty
        git -C $WORKDIR ls-tree --name-only HEAD | grep '.patch$' | xargs --no-run-if-empty git -C $WORKDIR rm -f

        # Extract the source RPM
        set +f
        mkdir $WORKDIR/extract
        rpm2cpio $SRPM | ( cd $WORKDIR/extract && cpio -idm )
        mv $WORKDIR/extract/* $WORKDIR
        set -f

        # Add in all the new patches
        spec_variables PATCH $spec | while read patch; do
            git -C $WORKDIR add -f $patch
        done

        # The release number in old notes
        wrongrel=$(spec_variable RELEASE $spec)

        # Update the current spec file and make sure to place marker
        sed -i -e "s/^Release:.*/Release: $release%{?dist}/" \
            -e "s/ - $version-$wrongrel\$/ - $version-$release/" \
            -e "\$a$logcut" \
            $spec

        # Now insert the old changelog replacing everything from the marker
        # Update the release and change log appropriately
        sed -i -e "/.*$logcut/r $logfile" \
            -e "/.*$logcut/,\$d" \
            $spec

        trace "Updating sources"

        # Update the sources file
        rm $WORKDIR/sources
        srpm_variables SOURCE $SRPM | while read file; do
            (cd $WORKDIR && md5sum $file) >> $WORKDIR/sources
            echo "/$file" >> $WORKDIR/.gitignore
        done

        trace "Committing changes"

        # Add the the sources file and spec file
        git -C $WORKDIR add sources $PACKAGE.spec .gitignore

        # Commit all of that with an appropriate message
        (
            printf "Update to %s-%s\n\n" $version $release
            spec_variable CHANGELOGTEXT $spec
        ) | git -C $WORKDIR commit -F -

        trace "Making a scratch build"

        cd $WORKDIR

        # We need a new srpm
        srpm=$(fedpkg srpm | sed -n 's/Wrote: \(.\+\.src\.rpm\)$/\1/p')

        # Build it in brew
        if ! fedpkg scratch-build --srpm=$srpm; then
            if [ $CONTINUE -eq 0 ]; then
                exit 1
            else
                already=1
            fi
        fi

        cd ..
    fi

    if [ $already -eq 1 ]; then
        exit 0
    fi
}

# Push all the changes that we've prepared
commit()
(
    cd $WORKDIR

    git checkout "$BRANCH"

    # Upload all the sources again
    fedpkg new-sources $(cut -d ' ' -f 2- sources)
    git reset --hard HEAD  # Undo any silliness littered by above

    # Push the changes
    git push origin "$BRANCH"

    # We shouldn't need --skip-nvr-check
    fedpkg build

    cd ..
    rm -rf $WORKDIR
)

while getopts "f:kp:qvxz" opt; do
    case "$opt" in
    k)
        CONTINUE=1
        ;;
    p)
        SRPM="$OPTARG"
        ;;
    q)
        QUIET=1
        VERBOSE=0
        ;;
    v)
        QUIET=0
        VERBOSE=1
        ;;
    x)
        TRANSACTION=1
        ;;
    z)
        CHECK=1
        ;;
    -)
        break
        ;;
    *)
        usage
        ;;
    esac
done

shift $(expr $OPTIND - 1)

if [ $# -ne 1 ]; then
    usage
fi

if [ $VERBOSE -eq 1 ]; then
    set -x
fi

if [ $CHECK -eq 1 ]; then
    check
    exit 0
fi

BRANCH="$1"

if [ -z "$SRPM" ]; then
    message "no source rpm file specified"
    exit 2
elif [ ! -f "$SRPM" ]; then
    message "source rpm file not found: $SRPM"
    exit 1
fi

PACKAGE=$(srpm_variable NAME $SRPM)
if [ -z "$PACKAGE" ]; then
    message "could not determine package name from source rpm"
    exit 1
fi

prepare

if [ $TRANSACTION -eq 1 ]; then
    kill -STOP $$
fi

commit
