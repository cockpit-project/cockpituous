#!/bin/sh -euf
#
# release-docs
#
# A script that uploads the documentation to a host links
# the latest documentation into place.
#
# $ make distcheck
# $ release-docs -f package-0.55.tbz doc/guide/html files.cockpit-project.org:/srv/guide/
#
# If the tarball is a symlink it will be resolved to its actual file name.
#
# Arguments are described here. Most arguments have an equivalent envvar.
#
# -f tgz     RELEASE_SOURCE=tbz     The tarball to extract documentation from
# -z         RELEASE_CHECK=1        Check access and configuration
#
# Specify a source directory (in the tarball) and the destination directory
# for the uploaded documentation.
#

set -euf

# Various arguments
CHECK=${RELEASE_CHECK:-0}
TRANSACTION=${RELEASE_TRANSACTION:-0}
QUIET=${RELEASE_QUIET:-0}
VERBOSE=${RELEASE_VERBOSE:-0}
SOURCE=${RELEASE_SOURCE:-}

# Other globals
WORKDIR="docs-upload"
TARBALL=""
DIRECTORY=""
DEST=""

usage()
{
    echo "usage: release-docs [-qvx] [-f TARBALL] DIRECTORY TO" >&2
    exit ${1-2}
}

trace()
{
    if [ $QUIET -eq 0 ]; then
        echo "> $@" >&2
    fi
}

message()
{
    echo "release-docs: $@" >&2
}

parse_version()
{
    echo "$@" | sed -n 's/.\+-\([0-9].*\)/\1/p'
}

check()
{
    rsync -l $DEST > /dev/null 2> /dev/null
    exit 0
}

prepare()
{
    local subdir version

    if [ ! -f "$TARBALL" ]; then
        message "tarball source not found: $TARBALL"
        exit 1
    fi

    trace "Extracting the tarball $TARBALL"

    rm -rf $WORKDIR
    mkdir -p $WORKDIR
    tar -f $TARBALL -C $WORKDIR -x

    cd $WORKDIR/

    set +f
    subdir=$(echo *)
    set -f

    version="$(parse_version $subdir)"
    if [ -z "$version" ]; then
        message "couldn't determine version from $subdir"
        exit 1
    fi

    if rsync -l $DEST/latest .; then
        if [ "$(readlink latest)" = "$version" ]; then
            trace "Already uploaded documentation for $version"
            exit 0
        fi
        rm -f latest
    fi

    trace "Uploading documentation for version $version"
    mv $subdir/$DIRECTORY/ $version
    rsync -Hvax $version $DEST/./

    ln -snf $version latest
}

commit()
{
    trace "Linking documentation"
    rsync -l latest $DEST/./
}

while getopts "f:qvxz" opt; do
    case "$opt" in
    f)
        SOURCE="$OPTARG"
        ;;
    q)
        QUIET=1
        VERBOSE=0
        ;;
    v)
        QUIET=0
        VERBOSE=1
        ;;
    x)
        TRANSACTION=1
        ;;
    z)
        CHECK=1
        ;;
    -)
        break
        ;;
    *)
        usage
        ;;
    esac
done

shift $(expr $OPTIND - 1)

if [ $# -ne 2 ]; then
    usage
fi

DIRECTORY="$1"
DEST="$2"

if [ -z "$SOURCE" ]; then
    message "no tarball source specified"
    exit 2
elif [ -d "$SOURCE" ]; then
    TARBALL="$(find $SOURCE -maxdepth 1 -name '*.tar.*' | sort | head -n1)"
elif [ -f "$SOURCE" ]; then
    TARBALL="$SOURCE"
else
    message "tarball source not found: $SOURCE"
    exit 1
fi

if [ $CHECK -eq 1 ]; then
    check
else
    prepare
fi

if [ $TRANSACTION -eq 1 ]; then
    kill -STOP $$
fi

commit
