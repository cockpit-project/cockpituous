#!/bin/sh -euf
#
# release-runner
#
# Runs a delivery script.
#
# The script is a shell script. Items in the script can be preceded
# with the word 'job'. If so, they will get $RELEASE_XXX envars exported
# and asked to run transactionally.
#
# If a given script item can run transactionally, it will pause before
# making published, permanent changes ... and wait for all the other
# jobs to proceed. If all succeed, then they are all unpaused and
# allowed to continue to completion, one at a time.
#
# Arguments are described here. Most arguments have an equivalent envvar.
#
# -n                                Dry run, stop before publishing changes
# -q         RELEASE_QUIET=1        Make output more quiet
# -r                                Do release from this repo. Clone it,
#                                   lookup latest tag, and run script
#                                   checking out of tag
# -v         RELEASE_VERBOSE=1      Make output more verbose
# -z         RELEASE_CHECK=1        Check access and configuration
# -l         RELEASE_SINK=1         Host to sink logs to
# -b         RELEASE_BRANCH=stable  Branch to release (default: master)
# -t         RELEASE_TAG=0.X        Tag to release
#


set -euf

# We want job control
set -m

SINK=${RELEASE_SINK:-}
RELEASE_TAG=${RELEASE_TAG:-}
RELEASE_BRANCH=${RELEASE_BRANCH:-master}
RELEASE_VERBOSE=0
RELEASE_TRANSACTION=1

FAIL=0
DRYRUN=0
JOBS=""
REPO=""

usage()
{
    echo "usage: release-runner [-nqvz] [-r REPO] [-b BRANCH ] [-t TAG] SCRIPT" >&2
    exit ${1:-2}
}

trace()
{
    if [ ${RELEASE_QUIET:-0} -eq 0 ]; then
        echo "> $@" >&2
    fi
}

message()
{
    echo "release-runner: $@" >&2
}

export_all()
{
    # Export all RELEASE_XXXX variables
    eval $(set | sed -n 's/^\(RELEASE_[^=]\+\)=.*/export \1/p')
}

job()
{
    local ret

    export_all

    if [ ${RELEASE_CHECK:-0} -eq 1 ]; then
        trace "Checking: $@"
    else
        trace "Starting: $@"
    fi

    # Run the task
    set +ea
    "$@"
    ret=$?
    set -e

    if [ $ret -eq 0 ]; then
        trace "Done: $@"
        return 0 # completed successfully

    elif [ $ret -gt 128 -a $ret -lt 193 ]; then
        sig=$(kill -l $ret)
        if [ "$sig" = "STOP" ]; then
            trace "Ready: $@"
            return 0 # job not yet finished
        else
            message "terminated with $sig: $@"
        fi

    elif [ ${RELEASE_CHECK:-0} -eq 1 ]; then
        trace "Fail: $@"
        FAIL=1
        return 0

    else
        message "failed code $ret: $@"
    fi

    exit $ret
}

runner()
{
    # Run the basic script
    set -a
    . $1
    set +a

    if [ $DRYRUN -eq 1 ]; then
        exit $FAIL
    fi

    # Run all the remaining background jobs
    JOBS=$(jobs -l | sed 's/[^0-9]*\([0-9]\+\).*/\1/')
    for job in $JOBS; do
        fg %$job
        trace "Completed job"
    done

    # Mark the build as released
    if [ -n "$REPO" ]; then
        git tag -d released-$RELEASE_TAG 2> /dev/null || true
        git tag released-$RELEASE_TAG
    fi
}

while getopts "l:nqr:b:t:vxz" opt; do
    case "$opt" in
    l)
        SINK="$OPTARG"
        ;;
    n)
        DRYRUN=1
        ;;
    q)
        RELEASE_QUIET=1
        RELEASE_VERBOSE=0
        ;;
    r)
        REPO="$OPTARG"
        ;;
    b)
        RELEASE_BRANCH="$OPTARG"
        ;;
    t)
        RELEASE_TAG="$OPTARG"
        ;;
    v)
        RELEASE_QUIET=0
        RELEASE_VERBOSE=1
        ;;
    z)
        RELEASE_CHECK=1
        DRYRUN=1
        ;;
    -)
        break
        ;;
    *)
        usage
        ;;
    esac
done

PATH=$PATH:$(dirname $0)

shift $(expr $OPTIND - 1)

if [ $# -lt 1 ]; then
    usage
fi

# Initialize the work directory
if [ -n "$REPO" ]; then
    if [ -d ".git" ]; then
        git fetch origin "$RELEASE_BRANCH"
    else
        git clone --branch "$RELEASE_BRANCH" "$REPO" .
    fi
    if [ -z "$RELEASE_TAG" -a -d ".git" ]; then
        RELEASE_TAG=$(git describe --match='[0-9]*' --abbrev=0 "origin/$RELEASE_BRANCH" || true)
    fi
fi

if [ -z "$RELEASE_TAG" ]; then
    message "No release tag set"
    exit 1
fi

# Already released this and checkout appropriately?
if [ -n "$REPO" ]; then
    if git show "released-$RELEASE_TAG" -- 2> /dev/null > /dev/null; then
        exit 0
    fi
    git checkout --detach $RELEASE_TAG
fi

if [ -z "$SINK" ]; then
    runner "$@"
else
    (
        # Respawn the current script but redirect to ssh
        export RELEASE_SINK=
        export RELEASE_TAG
        export_all
        exec 2>&1
        printf '{ "message": "Release running: %s", "irc": { "channel": "#cockpit" } }\n' "$RELEASE_TAG"
        if stdbuf -oL -eL "$0" "$@"; then
            printf '\n{ "message": "Release complete: %s", "irc": { "channel": "#cockpit" } }' "$RELEASE_TAG"
        else
            printf '\n{ "message": "Release failed: %s", "irc": { "channel": "#cockpit" } }' "$RELEASE_TAG"
        fi
    ) | stdbuf -oL -eL ssh "$SINK" -- python sink release-$RELEASE_TAG
fi
