#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2017 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import unittest

BASE = os.path.dirname(__file__)
sys.path.insert(1, os.path.join(BASE, ".."))

from learn import data
from learn import extractor

# These are some examples of what we expect normalized output, with noise removed, to look like

NETWORK_EXPECTED = """# testTeam (check_networking_team.TestNetworking)
not ok 000 testTeam (check_networking_team.TestNetworking) duration: 000s
File "check-networking-team", line 000, in testTeam
b.wait_present("#network-interface-slaves tr[data-interface='%s']" % iface000)
Wrote TestNetworking-testTeam-rhel-000-000.000.000.000-000-FAIL.png
Wrote TestNetworking-testTeam-rhel-000-000.000.000.000-000-FAIL.html
Journal extracted to TestNetworking-testTeam-rhel-000-000.000.000.000-000-FAIL.log
Journal extracted to TestNetworking-testTeam-fedora-000-000.000.000.000-000-FAIL.log"""

NOISE_INPUT = """
a4841dbd2d4d48452640268e10f0e0a35cf74305e69a18891532dcba2e32bfbb70eaeaeacc22218653677ffab4f5acade73561b096e833412951d3c0733306e6 README.md
0bbe314914ffc43f5a3651abcf4715995706b8cee819b2cf9790352e01ca472b  README.md
c18dfa94dc7369aecdfb9924cba5c845b93751e6b465d0142d64428a  README.md
98091a3eb2315927ef43305444ec7f747ad8885d  README.md
bf49b471ca34c9075d6f0bee229cea92  README.md

A4841DBD2D4D48452640268E10F0E0A35CF74305E69A18891532DCBA2E32BFBB70EAEAEACC22218653677FFAB4F5ACADE73561B096E833412951D3C0733306E6 README.MD
0BBE314914FFC43F5A3651ABCF4715995706B8CEE819B2CF9790352E01CA472B  README.MD
C18DFA94DC7369AECDFB9924CBA5C845B93751E6B465D0142D64428A  README.MD
98091A3EB2315927EF43305444EC7F747AD8885D  README.MD
BF49B471CA34C9075D6F0BEE229CEA92  README.MD

1 23 345 6789

/this/is/a/filename.temp
"""

NOISE_EXPECTED = """
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx README.md
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  README.md
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  README.md
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  README.md
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  README.md

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX README.MD
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  README.MD
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  README.MD
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  README.MD
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  README.MD

000 000 000 000

filename.temp
"""

REALM_EXPECTED = """# testNegotiate (check_realms.TestKerberos)
++ seq 000 000
+ for x in '$(seq 000 000)'
+ nslookup -type=SRV _ldap._tcp.cockpit.lan
+ break
+ realm join -U admin cockpit.lan
+ echo foobarfoo
See: journalctl REALMD_OPERATION=r000.000
realm: Couldn't join realm: Running ipa-client-install failed
+ journalctl -u realmd.service
+ exit 000
not ok 000 testNegotiate (check_realms.TestKerberos) duration: 000s
File "check-realms", line 000, in testNegotiate
self.configure_kerberos()
File "check-realms", line 000, in configure_kerberos
self.machine.execute(script=JOIN_SCRIPT % args)
File "testvm.py", line 000, in execute
raise subprocess.CalledProcessError(proc.returncode, command, output=output)
CalledProcessError: Command '<script>' returned non-zero exit status 000
Journal extracted to TestKerberos-testNegotiate-rhel-000-000.000.000.000-000-FAIL.log
Journal extracted to TestKerberos-testNegotiate-ipa-000.000.000.000-000-FAIL.log"""

EXPECTED_STOPS = set([
    u'',
    u'#',
    u'Error: timeout',
    u'return lambda *args: self._invoke(name, *args)',
    u"raise Error(res['error'])",
    u'File "testlib.py", line 000, in wait_present',
    u'return self.phantom.wait("%s(%s)" % (func, \',\'.join(map(jsquote, args))))',
    u'File "testlib.py", line 000, in <lambda>',
    u"return self.wait_js_func('ph_is_present', selector)",
    u'File "testlib.py", line 000, in _invoke',
    u'Traceback (most recent call last):',
    u'File "testlib.py", line 000, in wait_js_func',
    u'# ----------------------------------------------------------------------',
    u'File "testlib.py", line 000, in tearDown',
    u'File "testlib.py", line 000, in check_journal_messages',
    u'virbr000       xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx  bridge          virbr000',
    u'System eth000  xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx  000-000-ethernet  eth000',
    u'File "testlib.py", line 000, in wait_in_text',
    u'self.check_journal_messages()',
    u'000:000:000:000:000:000 -> eth000',
    u'NAME         UUID                                  TYPE            DEVICE',
    u'raise Error(first)',
    u"return self.wait_js_func('ph_in_text', selector, text)",
    u'System eth000  xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx  000-000-ethernet  --'
])

class TestExtractor(unittest.TestCase):
    def setUp(self):
        filename = os.path.join(os.path.dirname(__file__), "test-example.jsonl.gz")
        self.items = list(data.load(filename, limit=20, verbose=True))
        self.maxDiff = 10000

    def testSteps(self):
        noi = extractor.Extractor()
        noi.fit(self.items)
        result = list(noi.transform(self.items))
        self.assertEqual(result[1][extractor.FEATURE_LOG], NETWORK_EXPECTED)
        self.assertEqual(result[1][extractor.FEATURE_URL], "")
        self.assertEqual(result[1][extractor.FEATURE_NAME], "testTeam (check_networking_team.TestNetworking)")
        self.assertEqual(result[1][extractor.FEATURE_CONTEXT], "verify/rhel-7")
        self.assertEqual(result[1][extractor.FEATURE_TRACKER], "")
        self.assertEqual(result[1][extractor.FEATURE_MERGED], 1)
        self.assertEqual(result[1][extractor.FEATURE_TIMESTAMP], 1500567200.0)
        self.assertEqual(result[2][extractor.FEATURE_LOG], REALM_EXPECTED)
        self.assertEqual(result[2][extractor.FEATURE_URL], "")
        self.assertEqual(result[2][extractor.FEATURE_NAME], "testNegotiate (check_realms.TestKerberos)")
        self.assertEqual(result[2][extractor.FEATURE_CONTEXT], "verify/rhel-7")
        self.assertEqual(result[2][extractor.FEATURE_TRACKER], "")
        self.assertEqual(result[2][extractor.FEATURE_MERGED], 1)
        self.assertEqual(result[2][extractor.FEATURE_TIMESTAMP], 1500567200)

    def testTogether(self):
        result = list(extractor.Extractor().fit_transform(self.items))
        self.assertEqual(result[1][extractor.FEATURE_LOG], NETWORK_EXPECTED)
        self.assertEqual(result[1][extractor.FEATURE_URL], "")
        self.assertEqual(result[1][extractor.FEATURE_NAME], "testTeam (check_networking_team.TestNetworking)")
        self.assertEqual(result[1][extractor.FEATURE_CONTEXT], "verify/rhel-7")
        self.assertEqual(result[1][extractor.FEATURE_TRACKER], "")
        self.assertEqual(result[1][extractor.FEATURE_MERGED], 1)
        self.assertEqual(result[1][extractor.FEATURE_TIMESTAMP], 1500567200.0)
        self.assertEqual(result[2][extractor.FEATURE_LOG], REALM_EXPECTED)
        self.assertEqual(result[2][extractor.FEATURE_URL], "")
        self.assertEqual(result[2][extractor.FEATURE_NAME], "testNegotiate (check_realms.TestKerberos)")
        self.assertEqual(result[2][extractor.FEATURE_CONTEXT], "verify/rhel-7")
        self.assertEqual(result[2][extractor.FEATURE_TRACKER], "")
        self.assertEqual(result[2][extractor.FEATURE_MERGED], 1)
        self.assertEqual(result[2][extractor.FEATURE_TIMESTAMP], 1500567200.0)

    def testStops(self):
        noi = extractor.Extractor()
        noi.fit(self.items)
        self.assertEqual(noi.stop_tokens(), EXPECTED_STOPS)

    def testNoise(self):
        item = { "log": NOISE_INPUT }
        tokenized = extractor.Extractor.tokenize(item)
        cleaned = "\n".join(tokenized)
        self.assertEqual(cleaned, NOISE_EXPECTED)

if __name__ == '__main__':
    unittest.main()
