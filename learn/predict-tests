#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2017 Slavek Kabrda
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import argparse
import json
import os
import sys
import traceback
import urllib

sys.dont_write_bytecode = True

import cluster
import data

def predict(**kwargs):
    items = data.load(sys.stdin, only=None)
    model = cluster.load("./active")

    output = { }
    for item in items:
        if model:
            result = model.predict([ item ])[0]
            if result:
                clus = model.clusters.get(result[0])
                if clus:
                    output = clus.analyze(model.features)
        break # Only one item

    return json.dumps(output) + "\n"

def main():
    parser = argparse.ArgumentParser(description="Learn from testing data")
    parser.add_argument("-v", "--verbose", action="store_true",
            help="Verbose output")
    parser.add_argument("-d", "--directory", default=None, help="Directory to store cluster data in")
    parser.add_argument("input", default='-',
            help="Input JSONL GZ file or '-'")
    opts = parser.parse_args()

    if opts.input != '-':
        sys.stdin = data.open_if(opts.input, 'r')
    if opts.directory:
        os.chdir(opts.directory)

    task = {
        "name": "predict-tests",
        "verbose": opts.verbose,
        "directory": opts.directory,
    }

    output = predict(**task)
    sys.stdout.write(output)
    return 0

def cgi():
    status = ""
    result = 1
    content = "text/plain"
    try:
        if os.environ.get("REQUEST_METHOD") != "POST":
            status = "405 Unsupported method"
            raise RuntimeError("Use POST to push data to predict")

        directory = os.environ.get("TEST_DATA", ".")
        os.chdir(directory)

        query = urllib.parse.parse_qs(os.environ.get("QUERY_STRING", ""), keep_blank_values=True)
        status = "200 OK"
        output = predict(**query)
        content = "application/json"
        result = 0
    except RuntimeError as ex:
        status = status or "500 Exception"
        output = "sink: " + str(ex) + "\n"
    except:
        status = "500 Exception"
        output = traceback.format_exc()

    sys.stdout.write("Status: {0}\r\n".format(status))
    sys.stdout.write("Content-Type: {0}\r\n\r\n".format(content))
    sys.stdout.write(output)
    return result

if __name__ == '__main__':
    if "REQUEST_METHOD" in os.environ:
        sys.exit(cgi())
    else:
        sys.exit(main())
