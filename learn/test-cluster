#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2017 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import unittest

BASE = os.path.dirname(__file__)
sys.path.insert(1, os.path.join(BASE, ".."))

from learn import cluster
from learn import data
from learn import extractor

# Used commands like this to generate the fixture data
# zgrep -F ': "failure"' tests-train-1.jsonl.gz | head -n 200 | gzip > bots/task/test-example.jsonl.gz

class TestCluster(unittest.TestCase):
    def setUp(self):
        self.maxDiff = 10000

        filename = os.path.join(os.path.dirname(__file__), "test-example.jsonl.gz")
        items = list(data.load(filename, verbose=False, limit=200))
        self.items = items[::2]
        self.predict = items[1::2]
        self.predict[0]["log"] = "blah blah"
        self.predict[1]["log"] = ""

    def testModel(self):
        model = cluster.Model()
        items = list(self.items)
        model.train(items)

        self.assertEqual(len(model.clusters), 6)
        result = model.predict(self.predict)

        labels = list(map(lambda x: x[0], result))
        self.assertEqual(labels, [4, 4, None, None, None, None, None, None, 1, 0,
            None, None, None, 1, 1, None, 1, None, 5, None, None, 1, 0, 1, 4, None,
            None, None, 1, 4, None, 4, 4, None, None, None, None, 0, None, 1, None,
            None, None, None, 1, None, None, None, 4, None, None, 0, None, None,
            None, None, 4, None, 4, None, 5, None, None, 1, None, None, None, None,
            None, None, 3, None, None, 1, None, 1, 1, 4, None, 4, None, 4, None,
            None, 4, 4, 4, None, None, None, 4, None, None, 4, None, None, None,
            4, 4, 4])

    def testAnalyze(self):
        clus = cluster.Cluster(0, list(range(0, len(self.items))))
        features = extractor.Extractor().fit_transform(self.items)
        analysis = clus.analyze(features)
        self.assertEqual(analysis, {
            'merged': [
                (True, 50),
                (False, 50)],
            'tracker': [(None, 100)],
            'test': [
                ('testInternal (check_metrics.TestMetrics)', 10),
                ('testTeam (check_networking_team.TestNetworking)', 8),
                ('testBondMac (check_networking_mac.TestNetworking)', 7),
                ('testNoConnectionSettings (check_networking_settings.TestNetworking)', 6),
                ('testNegotiate (check_realms.TestKerberos)', 4),
                ('testAmbiguousSlave (check_networking_bond.TestNetworking)', 4),
                ('testFormatTypes (check_storage_format.TestStorage)', 4),
                ('testBasic (check_networking_basic.TestNetworking)', 4),
                ('testVlan (check_networking_vlan.TestNetworking)', 4),
                ('testUnmanaged (check_networking_unmanaged.TestNetworking)', 4),
                ('testSuper (check_reauthorize.TestReauthorize)', 3),
                ('testRaid (check_storage_mdraid.TestStorage)', 3),
                ('testMtu (check_networking_mtu.TestNetworking)', 3),
                ('testBond (check_networking_bond.TestNetworking)', 3),
                ('testFrameNavigation (check_multi_machine.TestMultiMachine)', 2),
                ('testNotRemovingDisks (check_storage_mdraid.TestStorage)', 2),
                ('testLvm (check_storage_lvm2.TestStorage)', 2),
                ('testBasic (check_multi_machine_key.TestMultiMachineKeyAuth)', 2),
                ('testFedora23Direct (check_multi_os.TestMultiOSDirect)', 2),
                ('testDevmapper (check_docker_storage.TestDockerStorage)', 2),
                ('testBasic (check_connection.TestConnection)', 2),
                ('testBasic (check_journal.TestJournal)', 1),
                ('testCheckpointSlowRollback (check_networking_checkpoints.TestNetworking)', 1),
                ('testConnect (check_openshift.TestOpenshift)', 1),
                ('testCreateTimer (check_services.TestServices)', 1),
                ('testFedora22 (check_multi_os.TestMultiOS)', 1),
                ('testImages (check_openshift.TestRegistry)', 1),
                ('testNoPackageKit (check_packagekit.TestUpdates)', 1),
                ('testBasic (check_session.TestSession)', 1),
                ('testMac (check_networking_mac.TestNetworking)', 1),
                ('testUsed (check_storage_used.TestStorage)', 1),
                ('testImagestreamImport (check_openshift.TestRegistry)', 1),
                ('testBasic (check_shutdown_restart.TestShutdownRestart)', 1),
                ('testAbrtReport (check_journal.TestJournal)', 1),
                ('testBridge (check_networking_bridge.TestNetworking)', 1),
                ('testBasic (check_dashboard.TestBasicDashboard)', 1),
                ('testProjectGroups (check_openshift.TestRegistry)', 1),
                ('testBasic (check_services.TestServices)', 1),
                ('testBasic (check_multi_machine.TestMultiMachineAdd)', 1),
                ('testBasic (check_loopback.TestLoopback)', 1)
            ],
            'context': [
                ('verify/rhel-atomic', 16),
                ('verify/ubuntu-stable', 15),
                ('verify/ubuntu-1604', 13),
                ('verify/rhel-7-4', 11),
                ('verify/debian-testing', 10),
                ('verify/rhel-7', 9),
                ('verify/fedora-i386', 8),
                ('verify/fedora-atomic', 7),
                ('verify/fedora-26', 5),
                ('verify/fedora-25', 3),
                ('verify/debian-stable', 2),
                ('verify/centos-7', 1)
            ],
            'status': [('failure', 100)],
            'date': ['20170718T153639Z', '20170720T224927Z'],
            'label': '0'
        })

if __name__ == '__main__':
    unittest.main()
